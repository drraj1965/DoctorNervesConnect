
"use server";

import { db } from "@/lib/firebase/config";
import { doc, setDoc, serverTimestamp } from "firebase/firestore";
import type { VideoMeta } from "@/types"; // Assuming VideoMeta is compatible
import { revalidatePath } from "next/cache";

interface IOSVideoDataForFirestore {
  videoId: string; // UUID generated on client
  title: string;
  description: string;
  keywords: string[];
  videoUrl: string;
  storagePath: string;
  videoSize: number;
  videoType: string;
  recordingDuration: number; // in seconds
  doctorId: string;
  doctorName: string;
}

export async function addVideoMetadataFromIOSAction(videoData: IOSVideoDataForFirestore): Promise<{ success: boolean; videoId?: string; error?: string }> {
  const { videoId, title, description, keywords, videoUrl, storagePath, videoSize, videoType, recordingDuration, doctorId, doctorName } = videoData;
  try {
    const videoDocRef = doc(db, "videos", videoId);
    
    const finalData: VideoMeta = {
      id: videoId,
      title,
      description,
      doctorId,
      doctorName,
      videoUrl,
      thumbnailUrl: "", // No thumbnail generated by this simplified recorder
      duration: formatDuration(recordingDuration), // Helper to format seconds to HH:MM:SS or MM:SS
      recordingDuration,
      tags: keywords,
      createdAt: new Date().toISOString(), // Placeholder, will be overwritten by serverTimestamp
      viewCount: 0,
      featured: false, // Default to not featured
      permalink: `/videos/${videoId}`,
      storagePath,
      thumbnailStoragePath: "", // No thumbnail generated
      videoSize,
      videoType,
      comments: [],
    };

    await setDoc(videoDocRef, {
      ...finalData,
      createdAt: serverTimestamp(), // Use server timestamp for consistency
    });

    revalidatePath('/dashboard');
    revalidatePath('/admin/dashboard');
    revalidatePath('/videos');
    revalidatePath(`/videos/${videoId}`);
    revalidatePath('/admin/manage-content');


    return { success: true, videoId: videoId };
  } catch (error) {
    console.error("Error adding video metadata from iOS to Firestore: ", error);
    return { success: false, error: error instanceof Error ? error.message : "Unknown error saving video metadata" };
  }
}

// Helper function to format duration from seconds to MM:SS or HH:MM:SS
function formatDuration(totalSeconds: number): string {
  const hours = Math.floor(totalSeconds / 3600);
  const minutes = Math.floor((totalSeconds % 3600) / 60);
  const seconds = Math.floor(totalSeconds % 60);

  const paddedSeconds = String(seconds).padStart(2, '0');
  const paddedMinutes = String(minutes).padStart(2, '0');

  if (hours > 0) {
    const paddedHours = String(hours).padStart(2, '0');
    return `${paddedHours}:${paddedMinutes}:${paddedSeconds}`;
  }
  return `${paddedMinutes}:${paddedSeconds}`;
}
