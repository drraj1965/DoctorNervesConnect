
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Doctors Collection
    match /doctors/{doctorId} {
      allow read: if true;
      allow read: if request.auth != null; // Allow authenticated users to query (e.g., for isAdmin checks)
      allow create: if request.auth != null && request.auth.uid == doctorId;
      allow update: if request.auth != null && request.auth.uid == doctorId;
      allow delete: if false; // Or restrict to specific admin UIDs if needed
    }

    // Users Collection
    match /users/{userId} {
      allow read: if request.auth != null; // Allow other authenticated services/rules to read user data if necessary
      allow read, update, delete: if request.auth != null && request.auth.uid == userId; // User can manage their own data
      allow create: if request.auth != null && request.auth.uid == userId;
    }

    // Articles Collection
    match /articles/{articleId} {
      allow read: if true;
      allow create, update, delete: if request.auth != null &&
                       get(/databases/$(database)/documents/doctors/$(request.auth.uid)).data.isAdmin == true;
    }

    // Videos Collection
    match /videos/{videoId} {
      allow read: if true;

      allow create: if request.auth != null &&
                       get(/databases/$(database)/documents/doctors/$(request.auth.uid)).data.isAdmin == true &&
                       request.resource.data.id == videoId && // Ensure client-generated ID matches path
                       request.resource.data.doctorId == request.auth.uid && // Corrected: check doctorId
                       request.resource.data.title is string && request.resource.data.title.size() > 0 &&
                       request.resource.data.description is string && // Assuming description can be empty but must be string
                       request.resource.data.doctorName is string &&
                       request.resource.data.videoUrl is string && request.resource.data.videoUrl.size() > 0 &&
                       request.resource.data.thumbnailUrl is string && request.resource.data.thumbnailUrl.size() > 0 &&
                       request.resource.data.duration is string &&
                       request.resource.data.tags is list && // Corrected: check tags
                       request.resource.data.viewCount is number &&
                       request.resource.data.likeCount is number &&
                       request.resource.data.commentCount is number &&
                       request.resource.data.featured is bool &&
                       request.resource.data.permalink is string &&
                       request.resource.data.storagePath is string &&
                       request.resource.data.thumbnailStoragePath is string &&
                       request.resource.data.videoSize is number &&
                       request.resource.data.videoType is string &&
                       request.resource.data.comments is list;
                       // `createdAt` is handled by serverTimestamp(), so not validated in request.resource.data for create

      allow update: if request.auth != null &&
                       get(/databases/$(database)/documents/doctors/$(request.auth.uid)).data.isAdmin == true;
      allow delete: if request.auth != null &&
                       get(/databases/$(database)/documents/doctors/$(request.auth.uid)).data.isAdmin == true;

      match /likes/{userId} {
        allow read: if request.auth != null;
        allow create, delete: if request.auth != null && request.auth.uid == userId;
      }
    }

    // Comments Collection (assuming top-level for now, adjust if subcollection)
    match /comments/{commentId} {
      allow read: if true;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update, delete: if request.auth != null &&
                                (resource.data.userId == request.auth.uid ||
                                 get(/databases/$(database)/documents/doctors/$(request.auth.uid)).data.isAdmin == true);
    }

    // Questions Collection
    match /questions/{questionId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null &&
                                (resource.data.patientId == request.auth.uid || // Assuming patientId for question author
                                 get(/databases/$(database)/documents/doctors/$(request.auth.uid)).data.isAdmin == true);
    }
    
    // Answers Collection
     match /answers/{answerId} {
      allow read: if true;
      allow create: if request.auth != null &&
                       get(/databases/$(database)/documents/doctors/$(request.auth.uid)).data.isAdmin == true;
      allow update, delete: if request.auth != null &&
                                (resource.data.doctorId == request.auth.uid || // Assuming doctorId for answer author
                                 get(/databases/$(database)/documents/doctors/$(request.auth.uid)).data.isAdmin == true);
    }

    // Activities Collection
    match /activities/{activityId} {
      allow read: if request.auth != null && resource.data.userId == request.auth.uid;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }
  }
}
